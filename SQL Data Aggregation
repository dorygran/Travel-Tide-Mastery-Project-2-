WITH flight_cohort AS (SELECT s.user_id,
                	      SUM(f.checked_bags)::FLOAT / COUNT(*) as average_bags, 
                	      SUM(CASE WHEN s.flight_discount THEN 1 ELSE 0 END) :: FLOAT / COUNT(*) AS discount_flight_proportion, 
                              ROUND(AVG(s.flight_discount_amount), 2) AS average_flight_discount,
                              SUM(s.flight_discount_amount* f.base_fare_usd) / 
       			      SUM(haversine_distance(geos.home_airport_lat, geos.home_airport_lon, f.destination_airport_lat, f.destination_airport_lon)) 
                       AS ADS
		       FROM flights AS f INNER JOIN (SELECT DISTINCT home_airport, 
                              				    home_airport_lat,
                                                            home_airport_lon
                              			    FROM users) AS geos ON f.origin_airport = geos.home_airport
		      INNER JOIN sessions AS s ON f.trip_id = s.trip_id
		      WHERE s.session_start > '2023-01-04' AND s.user_id in (SELECT DISTINCT user_id
				 					     FROM sessions
									     WHERE session_start > '2023-01-04'
									     GROUP BY user_id
									     HAVING COUNT(*)>7)
                     AND s.cancellation = FALSE
		     GROUP BY 1
),

hotel_cohort AS (SELECT s.user_id,
                	 SUM(CASE WHEN s.hotel_discount THEN 1 ELSE 0 END) :: FLOAT / COUNT(*) AS discount_hotel_proportion, 
                      	 ROUND(AVG(s.hotel_discount_amount), 2) AS average_hotel_discount,
                      	 CASE WHEN SUM(h.nights) > 0 THEN (SUM(h.hotel_per_room_usd * h.rooms * s.hotel_discount_amount) /SUM(h.nights)) ELSE NULL END 
                 AS ADS_night
       		  FROM hotels AS h 
		  INNER JOIN sessions AS s ON h.trip_id = s.trip_id
		  WHERE (s.session_start > '2023-01-04' AND s.user_id in (SELECT DISTINCT user_id
									  FROM sessions
									  WHERE session_start > '2023-01-04'
									  GROUP BY user_id
									  HAVING COUNT(*)>7))
                  AND s.cancellation = FALSE
		  GROUP BY 1
),  

cancellation_perk AS (SELECT user_id, 
			     SUM(CASE WHEN cancellation is TRUE THEN 1 ELSE 0 END)::FLOAT /
		   		SUM(CASE WHEN flight_booked IS TRUE OR hotel_booked IS TRUE THEN 1 ELSE 0 END) AS cancellation_rate,
			     SUM(CASE WHEN flight_booked is TRUE AND hotel_booked IS TRUE THEN 1 ELSE 0 END)::FLOAT /
		   		SUM(CASE WHEN flight_booked IS TRUE OR hotel_booked IS TRUE THEN 1 ELSE 0 END) AS combined_booking 
                     FROM sessions
		     WHERE session_start > '2023-01-04'
		     GROUP BY 1
		     HAVING COUNT(*)>7 AND COUNT(trip_id) > 0
),

user_activity AS (SELECT user_id, 
			    COUNT(session_id) AS session_number, 
       			    AVG(DATE_PART('second', session_end - session_start)) AS avg_session_sec
		     FROM sessions
		     WHERE session_start > '2023-01-04'
		     GROUP BY 1
		     HAVING COUNT(*)>7
),

scaled_indexes AS (SELECT  user_id,
			(average_bags - MIN(average_bags) OVER()) / (MAX(average_bags) OVER() - MIN(average_bags) 				OVER()) 
                   AS average_bags_scaled,
			discount_flight_proportion * average_flight_discount *
      			((ADS - MIN(ADS) OVER()) / (MAX(ADS) OVER() - MIN(ADS) OVER())) AS bargain_hunter_index 
			FROM flight_cohort
)

SELECT COALESCE(si.user_id,hc.user_id,ua.user_id,cp.user_id) AS user_id,
		si.average_bags_scaled,
		si.bargain_hunter_index,
		(hc.discount_hotel_proportion * hc.average_hotel_discount *
      ((ADS_night - MIN(ADS_night) OVER()) /
      (MAX(hc.ADS_night) OVER() - MIN(hc.ADS_night) OVER()))) AS hotel_hunter_index_scaled,
		 (cp.cancellation_rate - MIN(cp.cancellation_rate) OVER()) / (MAX(cp.cancellation_rate) OVER() - 
      MIN(cp.cancellation_rate) OVER()) AS cancellation_rate_scaled,  
      (cp.combined_booking - MIN(cp.combined_booking) OVER ()) / 
  	(MAX(cp.combined_booking) OVER() -MIN(cp.combined_booking) OVER()) ::FLOAT AS combined_booking_scaled,
	(ua.avg_session_sec-MIN(ua.avg_session_sec) OVER())/
		(MAX(ua.avg_session_sec) OVER () -MIN(ua.avg_session_sec) OVER()) ::FLOAT AS session_count_index_scaled
FROM scaled_indexes AS si 
FULL JOIN hotel_cohort AS hc
ON si.user_id = hc.user_id
FULL JOIN cancellation_perk AS cp 
ON cp.user_id = COALESCE(si.user_id, hc.user_id)
FULL JOIN user_activity AS ua ON ua.user_id = COALESCE(si.user_id, hc.user_id, cp.user_id)
;









